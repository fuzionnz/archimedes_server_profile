<?php

define('ARCHIMEDES_SYSTEM_UID', variable_get('archimedes_server_system_uid', 1));
define('ARCHIMEDES_APP_CATEGORIES', 'app_categories');

require_once dirname(__FILE__) . '/archimedes_server.features.inc';

/**
 * Implementation of hook_perm().
 */
function archimedes_server_perm() {
  return array('administer monitored site');
}

/**
* Implementation of hook_menu().
*/
function archimedes_server_menu() {
  $items = array();
  $items['admin/archimedes'] = array(
    'title' => t('Archimedes'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archimedes_server_admin'),
    'description' => t('Administer Archimedes Server'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['archimedes-server/verify-user'] = array(
    'access arguments' => array('administer monitored site'),
    'type' => MENU_CALLBACK,
    'page callback' => 'archimedes_server_verify_user',
  );
  $items['archimedes-server/update'] = array(
    'access arguments' => array('always access'),
    'access callback' => 'is_string',
    'page callback' => 'archimedes_server_post_xml',
  );
  return $items;
} // archimedes_server_menu()

/**
 * Settings form.
 * 
 * @TODO #7: Show a warning if archimedes_server_check_webkit() fails here.
 */
function archimedes_server_admin() {
  $form = array();
  $form['archimedes_mail'] = array(
    '#type' => 'fieldset',
    '#title' => t('POP Mail Settings'),
  );
  $form['archimedes_mail']['archimedes_mail_server'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Server'),
    '#default_value' => variable_get('archimedes_mail_server', ''),
    '#description' => t('Set mail server for Archimedes to get update emails.'),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_port'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Port'),
    '#size' => 5,
    '#default_value' => variable_get('archimedes_mail_port', '110'),
    '#description' => t('Set mail server port.'),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_user'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Username'),
    '#default_value' => variable_get('archimedes_mail_user', ''),
    '#description' => t('Set mail user for authentication.'),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_password'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Password'),
    '#description' => t('Set mail pass for authentication. Warning: This is stored unencrypted in the database.'),
    '#default_value' => variable_get('archimedes_mail_password', ''),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => 'SSL enabled',
    '#default_value' => variable_get('archimedes_mail_ssl', FALSE),
    '#description' => 'Check this box if the email uses pop3 over SSL',
  );
  $form['archimedes_mail']['archimedes_server_delete_emails'] = array(
    '#type' => 'checkbox',
    '#title' => 'Delete emails once received',
    '#description' => 'If emails are not deleted then they will be imported again and again. This is useful for debugging',
    '#default_value' => variable_get('archimedes_server_delete_emails', TRUE), 
  );
  $form['archimedes_keys'] = array(
    '#type' => 'fieldset',
    '#title' => t('SSL Public Key'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['archimedes_keys']['archimedes_key_public'] = array(
    '#value' => t('<pre>!public_key</pre>', array('!public_key' => variable_get('archimedes_key_public', ''))),
  );

  $form['#validate'][] = 'archimedes_server_form_validate_inbox';

  return system_settings_form($form);
} // archimedes_server_admin()

/**
 * Form handler for vaildating the archimedes inbox.
 */
function archimedes_server_form_validate_inbox($form, $form_state) {
  $values = $form_state['values'];
  include_once dirname(__FILE__) . '/archimedes_server.mail.inc';
  if (!archimedes_server_open_inbox($values['archimedes_mail_server'], $values['archimedes_mail_port'], $values['archimedes_mail_user'], $values['archimedes_mail_password'], $values['archimedes_mail_ssl'])) {
    form_set_error('archimedes_mail', t('Failed to login to email inbox with existing credentials.'));
    return FALSE;
  }
}

/**
 * Menu Callback: Handle a server request to process an encrypted XML document
 */
function archimedes_server_post_xml() {
  if (!$data = json_decode(file_get_contents('php://input'))) {
    watchdog('archimedes_server', 'Unable to decode submission, expected JSON, got: <pre>%input</pre>', array('%input' => print_r($file_get_contents('php://input'),1)), WATCHDOG_ERROR);
    drupal_not_found();
    die;
  }
  require_once dirname(__FILE__) . '/archimedes_server.inc';
  $return = array(
    'success' => 1,
  );
  if (!$xml = archimedes_server_decrypt(base64_decode($data->data), base64_decode($data->key))) {
    watchdog('archimedes_server', 'Unable to decrypt submitted data.', array(), WATCHDOG_ERROR);
    $return['success'] = 0;
    $return['message'] = 'Failed to decrypt data.';
  }
  elseif (!archimedes_server_process_document($xml)) {
    watchdog('archimedes_server', 'Unable to process submitted data.', array(), WATCHDOG_ERROR);
    $return['message'] = 'Failed to process decrypted data.';
    $return['success'] = 0;
  }
  print json_encode($return);
  die;
}

/**
* Implementation of hook_cron().
*/
function archimedes_server_cron() {
  require_once dirname(__FILE__) . '/archimedes_server.mail.inc';
  archimedes_server_clear_inbox();
}


/**
 * Check for the presense of webkit.
 */
function archimedes_server_check_webkit(){
  return is_dir(dirname(__FILE__) . '/python-webkit2png');
}

/**
 * Define archimedes default plugin list
 */
function archimedes_server_archimedes_server_plugins() {
  return array(
    'node', 'user', 'drupal-package',
  );
}

function archimedes_server_shell_exec($cmd) {
  $args = func_get_args();

  //do not change the command itself, just the parameters.
  for ($x = 1; $x < sizeof($args); $x++) {
    $args[$x] = escapeshellarg($args[$x]);
  }
  $command = call_user_func_array('sprintf', $args);

  return exec($command, $output, $result) ? $output : FALSE;
} // archimedes_shell_exec()

/**
  * Implementation of hook_block().
  * @param string $op one of "list", "view", "save" and "configure"
  * @param integer $delta code to identify the block
  * @param array $edit only for "save" operation
  */
function archimedes_server_block($op = 'list', $delta = 0, $edit = array()) {
  module_load_include('inc', 'archimedes_server');
  if ($op == 'list') {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
//    $block[0]['info'] = t('Storage Overview');
    $block[1]['info'] = t('Administer Monitored Site');
    $block[2]['info'] = t('Host Total Usage');
    $block[3]['info'] = t('Host Usage by Site');
    return $block;
  } elseif ($op == 'view') {

    $content = '';
    $subject = '';

    switch($delta) {
      case 0:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $node = node_load(arg(1));

          // Storage overview graph
          $size[0] = $node->field_db_size[0]['value'];
          $size[1] = $node->field_sitesize[0]['value'];
          $size[2] = $node->field_sitedata[0]['value'];

          $canvas = charts_graphs_get_graph(variable_get('archimedes_ui_graph', 'google-charts'));

          $canvas->title = "Storage Overview";
          $canvas->type = "pie";
          $canvas->width = 600;
          $canvas->height = 300;
          $canvas->series = array(
            'DB Size' => $size,
            'Webroot Size' => array(1),
            'Site Data Size' => array(1),
          );
          $canvas->x_labels = array(archimedes_server_format_bytes($size[0]), archimedes_server_format_bytes($size[1]), archimedes_server_format_bytes($size[2]));

          // check if associated SLA exists and calculate free disk space
          if ($sla = $node->field_sla[0]['nid']) {

            $sla_node = node_load($sla);
            $space = $sla_node->field_disk_space[0]['value'];
            $fs = ($space*1048576) - array_sum($size);

            // better check we aren't exceeding allowable disk space
            if ($fs < 0) {
              $fs = 0;
              $canvas->title .= '|' . t('Exceeding allowable disk space by') . ' ' . archimedes_server_format_bytes(array_sum($size) - ($space*1048576));
              $canvas->title_color = 'FF0000';
            } else {
               $canvas->series['Free Space'] = array(1);
               $canvas->series['DB Size'][] = $fs;
               $canvas->x_labels[] = archimedes_server_format_bytes($fs);
            }
          }

          $subject = t('Storage Overview');
          $content = $canvas->get_chart();
        }
        break;
      case 1:
        if (user_access('administer monitored site')) {
          if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
            $node = node_load(arg(1));
            $subject = "";
            $url = $node->field_servername[0]['url'];
            $hash = $node->field_unique_hash[0]['value'];
            if (!empty($url) && !empty($hash)) {
              global $user;
              $time = time();
              $query = array(
                'h' => $_SERVER['SERVER_NAME'],
                'w' => md5($user->name . $user->mail),
                't' => $time,
                'i' => md5($time . $hash),
              );
              $content = l(t("Administer Site &raquo;"), $url . '/archimedes/login', array('query' => $query, 'html' => TRUE));
              $content = '<div class="archimedes-administer-site">' . $content . '</div>';
            }
          }
        }
        break;
      case 2:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $host = node_load(arg(1));

          // Get total disk space from host node
          $total = ($host->field_disk_space[0]['value'] ? (int)$host->field_disk_space[0]['value'] * 1024 * 1024 : 0);

          $used = 0;
          // Get list of nodes showing current host as webserver or dbhost
          $data = nodereferrer_referrers(arg(1),array('field_webserver', 'field_dbhost'));

          // Add data usage depending if used as a webserver or dbhost
          foreach($data as $ref_node) {
            $node = node_load($ref_node['nid'],null,TRUE);
            if ($ref_node['referrers']['field_webserver']) {
              $used += (int) $node->field_sitesize[0]['value'];
              $used += (int) $node->field_sitedata[0]['value'];
            }
            if ($ref_node['referrers']['field_dbhost']) {
              $used += (int) $node->field_db_size[0]['value'];
            } 
          }
          
          $canvas = charts_graphs_get_graph(variable_get('archimedes_ui_graph', 'google-charts'));
          
          $canvas->title = "Total Usage";
          $canvas->type = "pie";
          $canvas->width = 550;
          $canvas->height = 300;
          $canvas->series = array(
            'Used Space' => array($used, ($total > $used ? $total - $used : 0)),
            'Free Space' => array(1)
          );
 
          $canvas->x_labels = array(archimedes_server_format_bytes($used), archimedes_server_format_bytes($total - $used));

          $subject = t('Total Usage');
          $content = $canvas->get_chart();
        }
        break;
      case 3:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $host = node_load(arg(1));
          
          $used = array();
          // Get list of nodes showing current host as webserver or dbhost
          $data = nodereferrer_referrers(arg(1),array('field_webserver', 'field_dbhost'));
          
          // Loop through each reffering site and add server usage
          foreach($data as $ref_node) {
            $node = node_load($ref_node['nid'],null,TRUE);
            $used[$ref_node['nid']] = array();
            $used[$ref_node['nid']]['usage'] = 0;
            $used[$ref_node['nid']]['title'] = $ref_node['title'];
            if ($ref_node['referrers']['field_webserver']) {
              $used[$ref_node['nid']]['usage'] += (int) $node->field_sitesize[0]['value'];
              $used[$ref_node['nid']]['usage'] += (int) $node->field_sitedata[0]['value'];
            }
            if ($ref_node['referrers']['field_dbhost']) {
              $used[$ref_node['nid']]['usage'] += (int) $node->field_db_size[0]['value'];
            } 
          }
          
          $canvas = charts_graphs_get_graph(variable_get('archimedes_ui_graph', 'google-charts'));
          
          $canvas->title = "Usage by Site";
          $canvas->type = "pie";
          $canvas->width = 550;
          $canvas->height = 300;
          
          //Rearrange data because charts_graphs module is strange
          $sizes = $labels = $series = array();
          foreach($used as $site) {
            $sizes[] = $site['usage'];
            $labels[] = archimedes_server_format_bytes($site['usage']);
          }
          foreach($used as $site) {
            $site['title'] = substr($site['title'],0,30);
            // Allow for unlikely senario where sites have the same name
            while(isset($series[$site['title']])) {
              $site['title'] = $site['title'] . '\'';
            }
            $series[$site['title']] = $sizes;
          }
          $canvas->series = $series;
          
 
          $canvas->x_labels = $labels;

          $subject = t('Usage by Site');
          $content = $canvas->get_chart();
        }
        break;
    }
    // Generate our block content
    $block['subject'] = $subject;
    $block['content'] = $content;

    return $block;
  }

} // function archimedes_server_block


/**
* Implementation of hook_nodeapi().
*/
function archimedes_server_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'insert':
      // Reference new SLA from reffering site node
      if ($node->type == 'sla' && is_numeric($snid = $_GET['snid'])) {
        $snode = node_load($snid);
        $snode->field_sla[0]['nid'] = $node->nid;
        node_save($snode);
      }
  }
}

/**
 * Verify a user has rights to administer a site.
 */
function archimedes_server_verify_user() {
  $fail_token = md5(mt_rand('100', '1000') . time());

  try {
    if (!isset($_GET['ekey']) || !isset($_GET['data'])) {
      throw new Exception($token);
    }
    require_once dirname(__FILE__) . '/archimedes_server.inc';

    if (!$uncrypt = archimedes_server_decrypt($_GET['data'], $_GET['ekey'])) {
      throw new Exception($token);
    }

    if (!$query = unserialize($uncrypt)) {
      throw new Exception($token);
    }
    if (!isset($query['token']) || !isset($query['redirect'])) {
      throw new Exception($token);
    }
    $token = $query['token'];
  }
  catch (Exception $e) {
    $token = $e->getMessage();
  }
  drupal_goto($query['redirect'], array('token' => $token));
}
